__start:
__text_start:
      3C E5CF      LDI	R28,0x5F
      3D E0D4      LDI	R29,4
      3E BFCD      OUT	0x3D,R28
      3F BFDE      OUT	0x3E,R29
      40 51C0      SUBI	R28,0x10
      41 40D0      SBCI	R29,0
      42 EA0A      LDI	R16,0xAA
      43 8308      STD	Y+0,R16
      44 2400      CLR	R0
      45 E8E3      LDI	R30,0x83
      46 E0F0      LDI	R31,0
      47 E010      LDI	R17,0
      48 39E3      CPI	R30,0x93
      49 07F1      CPC	R31,R17
      4A F011      BEQ	0x004D
      4B 9201      ST	R0,Z+
      4C CFFB      RJMP	0x0048
      4D 8300      STD	Z+0,R16
      4E E5E4      LDI	R30,0x54
      4F E0F0      LDI	R31,0
      50 E6A0      LDI	R26,0x60
      51 E0B0      LDI	R27,0
      52 E010      LDI	R17,0
      53 37E7      CPI	R30,0x77
      54 07F1      CPC	R31,R17
      55 F021      BEQ	0x005A
      56 95C8      LPM
      57 9631      ADIW	R30,1
      58 920D      ST	R0,X+
      59 CFF9      RJMP	0x0053
      5A 940E 0111 CALL	_main
_exit:
      5C CFFF      RJMP	_exit
_Delay:
  i                    --> R20
  x                    --> R16
      5D 934A      ST	R20,-Y
      5E 935A      ST	R21,-Y
FILE: F:\PROTELDXP\123\无线参考程序\开发板备份\JASK2001软件开发包\M16-NRF905开发包\无线AD传感\JIESHOU-LED\Wendu_jieshou.c
(0001) //ICC-AVR application builder : 2007-8-11 20:37:32
(0002) // Target : M16
(0003) // Crystal: 8.0000Mhz
(0004) #include <iom16v.h>
(0005) #include <macros.h>
(0006) #define uint  unsigned int
(0007) #define uchar unsigned char
(0008) //---------------------------------NRF905模式控制定义---------------------------------
(0009) //#define  nrf905_TX_EN	  PB0	    //输出1
(0010) #define   Hign_nrf905_TX_EN    PORTB |= (1 << PB0);   
(0011) #define   Low_nrf905_TX_EN     PORTB &= ~(1 << PB0); 
(0012) //#define  nrf905_TRX_CE  PD4 	    //输出1
(0013) #define   Hign_nrf905_TRX_CE    PORTD |= (1 << PD4);   
(0014) #define   Low_nrf905_TRX_CE     PORTD &= ~(1 << PD4); 
(0015) //#define  nrf905_PWR     PB1 	    //输出1
(0016) #define   Hign_nrf905_PWR    PORTB |= (1 << PB1);   
(0017) #define   Low_nrf905_PWR     PORTB &= ~(1 << PB1); 
(0018) //--------------------------------NRF905-SPI口接口定义--------------------------
(0019) //#define  nrf905_MISO	  PB6   	//输入0
(0020) //#define  nrf905_MOSI    PB5	    //输出1
(0021) //#define  nrf905_SCK     PB7	    //输出1
(0022) #define   Low_nrf905_SCK     PORTB &= ~(1 << PB7); 
(0023) //#define  nrf905_CSN     PB4		//输出1		
(0024) #define   Hign_nrf905_CSN    PORTB |= (1 << PB4);   
(0025) #define   Low_nrf905_CSN     PORTB &= ~(1 << PB4); 						
(0026) //-------------------------------NRF905状态输出口-------------------------------
(0027) //#define  nrf905_CD      PD3	    //输入0
(0028) #define   Hign_nrf905_CD    PORTD |= (1 << PD3);   
(0029) #define   Low_nrf905_CD     PORTD &= ~(1 << PD3); 
(0030) #define   Read_nrf905_CD    PINB & (1 << PD3);
(0031) //#define  nrf905_AM      PB3	    //输入0
(0032) #define   Hign_nrf905_AM    PORTB |= (1 << PB3);   
(0033) #define   Low_nrf905_AM     PORTB &= ~(1 << PB3); 
(0034) #define   Read_nrf905_AM    PINB & (1 << PB3);
(0035) //#define  nrf905_DR      PB2  		//输入0
(0036) #define   Hign_nrf905_DR     PORTB |= (1 << PB2);   
(0037) #define   Low_nrf905_DR     PORTB &= ~(1 << PB2); 
(0038) #define   Read_nrf905_DR    PINB & (1 << PB2);   
(0039) //------------------------------数码管位选--------------------------------------
(0040) //#define Display1   PA1  		    //输出1
(0041) #define   Hign_Display1     PORTA |= (1 << PA1);   
(0042) #define   Low_Display1    PORTA &= ~(1 << PA1); 
(0043) //#define Display2      PA2  		//输出1
(0044) #define   Hign_Display2     PORTA |= (1 << PA2);   
(0045) #define   Low_Display2    PORTA &= ~(1 << PA2); 
(0046) //#define Display3     PA3  		//输出1
(0047) #define   Hign_Display3     PORTA |= (1 << PA3);   
(0048) #define   Low_Display3     PORTA &= ~(1 << PA3); 
(0049) //#define Display4      PA4 		//输出1
(0050) #define   Hign_Display4     PORTA |= (1 << PA4);   
(0051) #define   Low_Display4     PORTA &= ~(1 << PA4);   
(0052) //-------------------------------BELL蜂明器-------------------------------------
(0053) #define   Hign_BELL  PORTD |= (1 << PD5);   
(0054) #define   Low_BELL     PORTD &= ~(1 << PD5); 
(0055) //-------------------------------JDQ继电器--------------------------------------
(0056) #define   Hign_JDQ  PORTD |= (1 << PD7)
(0057) #define   Low_JDQ     PORTD &= ~(1 << PD7) 
(0058) //----------------------------------NRF905-SPI指令------------------------------
(0059) #define WC	0x00
(0060) #define RRC	0x10
(0061) #define WTP	0x20
(0062) #define RTP	0x21
(0063) #define WTA	0x22
(0064) #define RTA	0x23
(0065) #define RRP	0x24
(0066) //---------------------------------发送数据-------------------------------------
(0067) uchar TxRxBuffer[4];
(0068) //----------------------------------接收地址------------------------------------
(0069) uchar TxAddress[4]={0xcc,0xcc,0xcc,0xcc };    
(0070) uint temp[6];
(0071) uchar seg[10]={0xC0,0xCF,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};         //0~~9段码
(0072) uchar seg1[10]={0x40,0x4F,0x24,0x30,0x19,0x12,0x02,0x78,0x00,0x10};
(0073) //----------------------------------寄存器配置----------------------------------
(0074) uchar RFConf[11]=
(0075) {
(0076)   0x00,                            //配置命令//
(0077)   0x4c,                           //CH_NO,配置频段在430MHZ
(0078)   0x0C,                          //输出功率为10db,不重发，节电为正常模式
(0079)   0x44,                         //地址宽度设置，为4字节
(0080)   0x04,0x04,                   //接收发送有效数据长度为32字节
(0081)   0xCC,0xCC,0xCC,0xCC,        //接收地址
(0082)   0x58,                      //CRC充许，8位CRC校验，外部时钟信号不使能，16M晶振
(0083) };
(0084) //----------------------------------NRF905函数申明------------------------------
(0085) void Delay(uint x);						       //延时子程序																							
(0086) void Spi_initial();                            //SPI初始化
(0087) uchar SpiReadSpiWrite(unsigned char cData);    //SPI读写子程序
(0088) void system_Init(void);		   				   //系统初始化
(0089) void Config905(void);						   //NRF905初始化子程序
(0090) void SetRxMode(void);						   //
(0091) unsigned char CheckDR(void);
(0092) void RxPacket(void);
(0093) void  RX(void);
(0094) //-------------------------------串口函数申明-----------------------------------
(0095) void StartUART(void);
(0096) void R_S_Byte(uchar R_Byte);
(0097) //----------------------------------100us延时子程序-----------------------------
(0098) void Delay(uint x)
(0099) {
      5F C009      RJMP	0x0069
(0100) 	uint i;
(0101) 	while(x--)
(0102) 	for(i=0;i<80;i++);
      60 2744      CLR	R20
      61 2755      CLR	R21
      62 C002      RJMP	0x0065
      63 5F4F      SUBI	R20,0xFF
      64 4F5F      SBCI	R21,0xFF
      65 3540      CPI	R20,0x50
      66 E0E0      LDI	R30,0
      67 075E      CPC	R21,R30
      68 F3D0      BCS	0x0063
      69 0118      MOVW	R2,R16
      6A 5001      SUBI	R16,1
      6B 4010      SBCI	R17,0
      6C 2022      TST	R2
      6D F791      BNE	0x0060
      6E 2033      TST	R3
      6F F781      BNE	0x0060
      70 9159      LD	R21,Y+
      71 9149      LD	R20,Y+
      72 9508      RET
(0103) }
(0104) //----------------------------------SPI初始化-----------------------------------
(0105) void Spi_initial()
(0106) {
(0107) 	SPCR   = (1<<SPE)|(1<<MSTR)|(0<<CPOL)|(0<<SPR0);// 主机模式，fck/16, SPI方式0
_Spi_initial:
      73 E580      LDI	R24,0x50
      74 B98D      OUT	0x0D,R24
      75 9508      RET
(0108) }
(0109) //---------------------------------SPI读写程序----------------------------------	
(0110) uchar SpiReadSpiWrite(unsigned char cData)
(0111) {
(0112) 	SPDR = cData;
_SpiReadSpiWrite:
  cData                --> R16
      76 B90F      OUT	0x0F,R16
(0113) 	while(!(SPSR & (1<<SPIF) ))  // 等待SPI发送完毕
      77 9B77      SBIS	0x0E,7
      78 CFFE      RJMP	0x0077
(0114) 	{};			
(0115) 	return SPDR;
      79 B10F      IN	R16,0x0F
      7A 9508      RET
(0116) }
(0117) //--------------------------------系统状态初始化--------------------------------
(0118) void system_Init(void)			
(0119) {
(0120) 
(0121)    	Hign_nrf905_CSN;			// SPI使能
_system_Init:
      7B 9AC4      SBI	0x18,4
(0122) 	Low_nrf905_SCK;				
      7C 98C7      CBI	0x18,7
(0123) 	Low_nrf905_DR;				// DR=0
      7D 98C2      CBI	0x18,2
(0124) 	Low_nrf905_AM;				// AM=0
      7E 98C3      CBI	0x18,3
(0125) 	Low_nrf905_CD;				// CD=0
      7F 9893      CBI	0x12,3
(0126) 	Hign_nrf905_PWR;		    // PWR=1
      80 9AC1      SBI	0x18,1
(0127) 	Low_nrf905_TRX_CE;			// nrf905_TRX_CE=0
      81 9894      CBI	0x12,4
(0128) 	Low_nrf905_TX_EN ;			// nrf905_TX_EN=0
      82 98C0      CBI	0x18,0
      83 9508      RET
_Config905:
  i                    --> R20
      84 934A      ST	R20,-Y
      85 935A      ST	R21,-Y
(0129) }
(0130) //--------------------------------NRF905寄存器初始化函数------------------------
(0131) void Config905(void)
(0132) {
(0133) 	uchar i;
(0134) 	Low_nrf905_CSN;				//SPI使能											
      86 98C4      CBI	0x18,4
(0135) 	Delay(1);				   
      87 E001      LDI	R16,1
      88 E010      LDI	R17,0
      89 DFD3      RCALL	_Delay
(0136) 	for (i=0;i<11;i++)			//写RF905配置字
      8A 2744      CLR	R20
      8B C009      RJMP	0x0095
(0137) 	{
(0138) 	 SpiReadSpiWrite(RFConf[i]);
      8C E788      LDI	R24,0x78
      8D E090      LDI	R25,0
      8E 2FE4      MOV	R30,R20
      8F 27FF      CLR	R31
      90 0FE8      ADD	R30,R24
      91 1FF9      ADC	R31,R25
      92 8100      LDD	R16,Z+0
      93 DFE2      RCALL	_SpiReadSpiWrite
      94 9543      INC	R20
      95 304B      CPI	R20,0xB
      96 F3A8      BCS	0x008C
(0139) 	}
(0140) 	Hign_nrf905_CSN;					// Disable Spi
      97 9AC4      SBI	0x18,4
      98 9159      LD	R21,Y+
      99 9149      LD	R20,Y+
      9A 9508      RET
(0141) }
(0142) //------------------------------设置接收模式激发--------------------------------
(0143) void SetRxMode(void)
(0144) {
(0145) 	Low_nrf905_TX_EN;
_SetRxMode:
      9B 98C0      CBI	0x18,0
(0146) 	Hign_nrf905_TRX_CE;
      9C 9A94      SBI	0x12,4
(0147) 	Delay(10); 					// delay for mode change(>=650us)
      9D E00A      LDI	R16,0xA
      9E E010      LDI	R17,0
      9F DFBD      RCALL	_Delay
      A0 9508      RET
(0148) }
(0149) //-----------------------------判断是否收到数据---------------------------------
(0150) unsigned char CheckDR(void)		//检查是否有新数据传入 
(0151) {
(0152) 	if (PINB & (1 << PB2))
_CheckDR:
      A1 9BB2      SBIS	0x16,2
      A2 C002      RJMP	0x00A5
(0153) 	{
(0154) 		return 1; 	 	  		//收到数据
      A3 E001      LDI	R16,1
      A4 C001      RJMP	0x00A6
(0155) 	}
(0156) 	else
(0157) 	{
(0158) 		return 0;
      A5 2700      CLR	R16
      A6 9508      RET
_RxPacket:
  i                    --> R20
      A7 934A      ST	R20,-Y
      A8 935A      ST	R21,-Y
(0159) 	}
(0160) }
(0161) //-----------------------------------读接收数据包-------------------------------
(0162) void RxPacket(void)							//读数据
(0163) {
(0164) 	uchar i;
(0165)     Low_nrf905_TRX_CE;
      A9 9894      CBI	0x12,4
(0166) 	Low_nrf905_CSN;						    // 使能SPI
      AA 98C4      CBI	0x18,4
(0167)     Delay(1);
      AB E001      LDI	R16,1
      AC E010      LDI	R17,0
      AD DFAF      RCALL	_Delay
(0168) 	SpiReadSpiWrite(RRP);				   // 写入数据接收缓冲区数据命令
      AE E204      LDI	R16,0x24
      AF DFC6      RCALL	_SpiReadSpiWrite
(0169) 	for (i = 0 ;i < 4 ;i++)
      B0 2744      CLR	R20
      B1 C00A      RJMP	0x00BC
(0170) 	{   
(0171) 	TxRxBuffer[i]=SpiReadSpiWrite(0);	  // 读取数据接收缓冲区数据       
      B2 2700      CLR	R16
      B3 DFC2      RCALL	_SpiReadSpiWrite
      B4 E88F      LDI	R24,0x8F
      B5 E090      LDI	R25,0
      B6 2FE4      MOV	R30,R20
      B7 27FF      CLR	R31
      B8 0FE8      ADD	R30,R24
      B9 1FF9      ADC	R31,R25
      BA 8300      STD	Z+0,R16
      BB 9543      INC	R20
      BC 3044      CPI	R20,4
      BD F3A0      BCS	0x00B2
(0172) 	}
(0173) 	Hign_nrf905_CSN;
      BE 9AC4      SBI	0x18,4
(0174)     Delay(2);                            //
      BF E002      LDI	R16,2
      C0 E010      LDI	R17,0
      C1 DF9B      RCALL	_Delay
(0175) 	Hign_nrf905_TRX_CE;							
      C2 9A94      SBI	0x12,4
      C3 9159      LD	R21,Y+
      C4 9149      LD	R20,Y+
      C5 9508      RET
(0176) }
(0177) //--------------------------------设置接收模式----------------------------------
(0178) void  RX(void)
(0179) {
(0180)     SetRxMode();			          //设置NRF905接收模式
_RX:
      C6 DFD4      RCALL	_SetRxMode
(0181)   while (CheckDR()==0);	         //等待接收完成
      C7 DFD9      RCALL	_CheckDR
      C8 2300      TST	R16
      C9 F3E9      BEQ	0x00C7
(0182) 	RxPacket();                     //读取接收数据缓冲区
      CA DFDC      RCALL	_RxPacket
(0183) 	Delay(10);
      CB E00A      LDI	R16,0xA
      CC E010      LDI	R17,0
      CD DF8F      RCALL	_Delay
      CE 9508      RET
(0184) }
(0185) //-------------------------------串口初始化-------------------------------------
(0186) void StartUART(void)
(0187) {
(0188)  	 UCSRA=0x00;	
_StartUART:
      CF 2422      CLR	R2
      D0 B82B      OUT	0x0B,R2
(0189) 	 UCSRB=0x18;	
      D1 E188      LDI	R24,0x18
      D2 B98A      OUT	0x0A,R24
(0190) 	 UCSRC=0x06;	
      D3 E086      LDI	R24,6
      D4 BD80      OUT	0x20,R24
(0191) 	 UBRRL=0x67;
      D5 E687      LDI	R24,0x67
      D6 B989      OUT	0x09,R24
(0192) 	 UBRRH=0x00;
      D7 BC20      OUT	0x20,R2
(0193) 	 UCSRA=UCSRA|0x08;	
      D8 9A5B      SBI	0x0B,3
      D9 9508      RET
(0194) }
(0195) //------------------------------串口发送----------------------------------------
(0196) void R_S_Byte(uchar R_Byte)
(0197) {	
(0198)      UDR= R_Byte;  
_R_S_Byte:
  R_Byte               --> R16
      DA B90C      OUT	0x0C,R16
      DB 9508      RET
(0199) }
(0200) //------------------------------------------------------------------------------
(0201) void dis_zhuye()
(0202) {
(0203) 	 PORTC=seg1[TxRxBuffer[1]];
_dis_zhuye:
      DC E68E      LDI	R24,0x6E
      DD E090      LDI	R25,0
      DE 91E0 0090 LDS	R30,TxRxBuffer+1
      E0 27FF      CLR	R31
      E1 0FE8      ADD	R30,R24
      E2 1FF9      ADC	R31,R25
      E3 8020      LDD	R2,Z+0
      E4 BA25      OUT	0x15,R2
(0204) 	 Hign_Display4;
      E5 9ADC      SBI	0x1B,4
(0205) 	 Hign_Display3;
      E6 9ADB      SBI	0x1B,3
(0206) 	 Hign_Display2;
      E7 9ADA      SBI	0x1B,2
(0207) 	 Low_Display1;
      E8 98D9      CBI	0x1B,1
(0208) 	 Delay(80);
      E9 E500      LDI	R16,0x50
      EA E010      LDI	R17,0
      EB DF71      RCALL	_Delay
(0209) 	 Hign_Display1;
      EC 9AD9      SBI	0x1B,1
(0210) //------------------------------------------------------------------------------
(0211) 	 PORTC=seg[TxRxBuffer[2]];
      ED E684      LDI	R24,0x64
      EE E090      LDI	R25,0
      EF 91E0 0091 LDS	R30,TxRxBuffer+2
      F1 27FF      CLR	R31
      F2 0FE8      ADD	R30,R24
      F3 1FF9      ADC	R31,R25
      F4 8020      LDD	R2,Z+0
      F5 BA25      OUT	0x15,R2
(0212) 	 Low_Display2;
      F6 98DA      CBI	0x1B,2
(0213) 	 Delay(80);
      F7 E500      LDI	R16,0x50
      F8 E010      LDI	R17,0
      F9 DF63      RCALL	_Delay
(0214) 	 Hign_Display2;
      FA 9ADA      SBI	0x1B,2
(0215) //------------------------------------------------ ---------------------------
(0216) 	 PORTC=seg[TxRxBuffer[3]];
      FB E684      LDI	R24,0x64
      FC E090      LDI	R25,0
      FD 91E0 0092 LDS	R30,TxRxBuffer+3
      FF 27FF      CLR	R31
     100 0FE8      ADD	R30,R24
     101 1FF9      ADC	R31,R25
     102 8020      LDD	R2,Z+0
     103 BA25      OUT	0x15,R2
(0217) 	 Low_Display3;
     104 98DB      CBI	0x1B,3
(0218) 	 Delay(80);
     105 E500      LDI	R16,0x50
     106 E010      LDI	R17,0
     107 DF55      RCALL	_Delay
(0219) 	 Hign_Display3;
     108 9ADB      SBI	0x1B,3
(0220) //----------------------------------------------------------------------------- 
(0221) 	 PORTC=0xc1;
     109 EC81      LDI	R24,0xC1
     10A BB85      OUT	0x15,R24
(0222) 	 Low_Display4;
     10B 98DC      CBI	0x1B,4
(0223) 	 Delay(80);
     10C E500      LDI	R16,0x50
     10D E010      LDI	R17,0
     10E DF4E      RCALL	_Delay
(0224) 	 Hign_Display4;	 
     10F 9ADC      SBI	0x1B,4
     110 9508      RET
(0225) }
(0226) //------------------------------主函数------------------------------------------
(0227) void main(void)
(0228) {  
(0229) 	uchar i;
(0230) 	DDRD=0xb2;		  //
_main:
  i                    --> Y,+1
     111 EB82      LDI	R24,0xB2
     112 BB81      OUT	0x11,R24
(0231) 	DDRB=0xB3;		  //
     113 EB83      LDI	R24,0xB3
     114 BB87      OUT	0x17,R24
(0232) 	DDRA=0x1e;       //
     115 E18E      LDI	R24,0x1E
     116 BB8A      OUT	0x1A,R24
(0233) 	DDRC=0xff; 		//LED端口设置
     117 EF8F      LDI	R24,0xFF
     118 BB84      OUT	0x14,R24
(0234) 	PORTA = 0xff;
     119 BB8B      OUT	0x1B,R24
(0235) 	Hign_BELL;	
     11A 9A95      SBI	0x12,5
(0236) 	Hign_JDQ ;				
     11B 9A97      SBI	0x12,7
(0237) //------------------------------------------------------------------------------				  			 				
(0238) 	Spi_initial();	                //SPI初始化															  
     11C DF56      RCALL	_Spi_initial
(0239) 	system_Init();				   //系统状态初始化												
     11D DF5D      RCALL	_system_Init
(0240) 	Config905();  				  //NRF905初始化	
     11E DF65      RCALL	_Config905
(0241) 	StartUART();
     11F DFAF      RCALL	_StartUART
(0242) 	Delay(500);			  
     120 EF04      LDI	R16,0xF4
     121 E011      LDI	R17,1
     122 DF3A      RCALL	_Delay
     123 C00E      RJMP	0x0132
(0243) //------------------------------------------------------------------------------
(0244) 	while(1)
(0245) 	{
(0246) 	RX();  					//接收数据
     124 DFA1      RCALL	_RX
(0247) 	if(TxRxBuffer[0]||TxRxBuffer[1]||TxRxBuffer[2])
     125 9020 008F LDS	R2,TxRxBuffer
     127 2022      TST	R2
     128 F441      BNE	0x0131
     129 9020 0090 LDS	R2,TxRxBuffer+1
     12B 2022      TST	R2
     12C F421      BNE	0x0131
     12D 9020 0091 LDS	R2,TxRxBuffer+2
     12F 2022      TST	R2
     130 F009      BEQ	0x0132
(0248) 	{
(0249) 	dis_zhuye();
FILE: <library>
     131 DFAA      RCALL	_dis_zhuye
     132 CFF1      RJMP	0x0124
     133 9508      RET
