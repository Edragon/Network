__text_start:
__start:
      32 E5CF      LDI	R28,0x5F
      33 E0D4      LDI	R29,4
      34 BFCD      OUT	0x3D,R28
      35 BFDE      OUT	0x3E,R29
      36 51C0      SUBI	R28,0x10
      37 40D0      SBCI	R29,0
      38 EA0A      LDI	R16,0xAA
      39 8308      STD	Y+0,R16
      3A 2400      CLR	R0
      3B E6EF      LDI	R30,0x6F
      3C E0F0      LDI	R31,0
      3D E010      LDI	R17,0
      3E 37E3      CPI	R30,0x73
      3F 07F1      CPC	R31,R17
      40 F011      BEQ	0x0043
      41 9201      ST	R0,Z+
      42 CFFB      RJMP	0x003E
      43 8300      STD	Z+0,R16
      44 E5E4      LDI	R30,0x54
      45 E0F0      LDI	R31,0
      46 E6A0      LDI	R26,0x60
      47 E0B0      LDI	R27,0
      48 E010      LDI	R17,0
      49 36E3      CPI	R30,0x63
      4A 07F1      CPC	R31,R17
      4B F021      BEQ	0x0050
      4C 95C8      LPM
      4D 9631      ADIW	R30,1
      4E 920D      ST	R0,X+
      4F CFF9      RJMP	0x0049
      50 940E 00C7 CALL	_main
_exit:
      52 CFFF      RJMP	_exit
_Delay:
  i                    --> R20
  x                    --> R16
      53 934A      ST	R20,-Y
      54 935A      ST	R21,-Y
FILE: F:\JASK\无线资料集锦\开发备份\JASK2001开发包0905\M16-NRF905开发包\单向无线开关控制\NRF905_发送\jfp_fasong.c
(0001) //ICC-AVR application builder : 2007-8-11 20:37:32
(0002) // Target : M16
(0003) // Crystal: 8.0000Mhz
(0004) #include <iom16v.h>
(0005) #include <macros.h>
(0006) #define uint  unsigned int
(0007) #define uchar unsigned char
(0008) ///////////////////////////模式控制定义/////////////////////////////////
(0009) //#define  nrf905_TX_EN	  PB0	    //输出1  
(0010) #define    Low_nrf905_TX_EN     PORTB &= ~(1 << PB0)
(0011) #define   Hign_nrf905_TX_EN    PORTB |= (1 << PB0)
(0012) //#define  nrf905_TRX_CE  PD4 	    //输出1
(0013) #define   Hign_nrf905_TRX_CE    PORTD |= (1 << PD4)  
(0014) #define   Low_nrf905_TRX_CE     PORTD &= ~(1 << PD4) 
(0015) //#define  nrf905_PWR     PB1 	    //输出1
(0016) #define   Hign_nrf905_PWR    PORTB |= (1 << PB1) 
(0017) #define   Low_nrf905_PWR     PORTB &= ~(1 << PB1)
(0018) //--------------------------------SPI口定义-------------------------------------
(0019) //#define  nrf905_MISO	  PB6   	//输入0
(0020) //#define  nrf905_MOSI    PB5	    //输出1
(0021) //#define  nrf905_SCK     PB7	    //输出1
(0022) #define   Low_nrf905_SCK     PORTB &= ~(1 << PB7)
(0023) //------------------------------------------------------------------------------
(0024) //#define  nrf905_CSN     PB4		//输出1		
(0025) #define   Hign_nrf905_CSN    PORTB |= (1 << PB4)  
(0026) #define   Low_nrf905_CSN     PORTB &= ~(1 << PB4)				
(0027) //-------------------------------状态输出口-------------------------------------
(0028) //#define  nrf905_CD      PD3    //输入0
(0029) #define   Hign_nrf905_CD    PORTD |= (1 << PD3) 
(0030) #define   Low_nrf905_CD     PORTD &= ~(1 << PD3) 
(0031) #define   Read_nrf905_CD    PINB & (1 << PD4)
(0032) //#define  nrf905_AM      PB3	    //输入0
(0033) #define   Hign_nrf905_AM    PORTB |= (1 << PB3) 
(0034) #define   Low_nrf905_AM     PORTB &= ~(1 << PB3)
(0035) #define   Read_nrf905_AM    PINB & (1 << PB3)
(0036) //#define  nrf905_DR      PB2  		//输入0
(0037) #define   Hign_nrf905_DR    PORTB |= (1 << PB2)
(0038) #define   Low_nrf905_DR     PORTB &= ~(1 << PB2)
(0039) #define   Read_nrf905_DR    PINB & (1 << PB2)
(0040) //-------------------------------BELL蜂明器-------------------------------------
(0041) #define   High_BELL  PORTD |= (1 << PD5);   
(0042) #define   Low_BELL     PORTD &= ~(1 << PD5); 
(0043) //-------------------------------JDQ继电器--------------------------------------
(0044) #define   Hign_JDQ  PORTD |= (1 << PD7)
(0045) #define   Low_JDQ     PORTD &= ~(1 << PD7)
(0046) //读取键值KEYA-KEYB-KEYC  
(0047) #define   Read_KEY_A   	    PINA & (1 << PA6)
(0048) #define   Read_KEY_B   	    PINA & (1 << PA5)
(0049) #define   Read_KEY_C    	PINA & (1 << PA4)
(0050) //----------------------------------905-SPI指令---------------------------------
(0051) #define WC	0x00
(0052) #define RRC	0x10
(0053) #define WTP	0x20
(0054) #define RTP	0x21
(0055) #define WTA	0x22
(0056) #define RTA	0x23
(0057) #define RRP	0x24
(0058) //---------------------------------发送数据-------------------------------------
(0059) uchar TxRxBuf[4];
(0060) //----------------------------------接收地址------------------------------------
(0061) uchar TxAddress[4]={0xcc,0xcc,0xcc,0xcc };    
(0062) //----------------------------------寄存器配置----------------------------------
(0063) uchar RFConf[11]=
(0064) {
(0065)   0x00,                             //配置命令//
(0066)   0x4c,                             //CH_NO,配置频段在430MHZ
(0067)   0x0C,                             //输出功率为10db,不重发，节电为正常模式
(0068)   0x44,                             //地址宽度设置，为4字节
(0069)   0x04,0x04,                        //接收发送有效数据长度为4字节
(0070)   0xCC,0xCC,0xCC,0xCC,              //接收地址
(0071)   0x58,                              //CRC充许，8位CRC校验，外部时钟信号不使能，16M晶振
(0072) };
(0073) //----------------------------------函数申明------------------------------------
(0074) void Delay(uint x);
(0075) void Spi_initial();
(0076) uchar SpiReadSpiWrite(uchar DATA);
(0077) void system_Init(void);
(0078) void Config905(void);
(0079) void TxPacket(uchar TxBUF[4]);
(0080) void SetTxMode(void);
(0081) void TX(void);
(0082) void StartUART(void);
(0083) void R_S_Byte(uchar R_Byte);
(0084) //----------------------------------100us延时子程序-----------------------------
(0085) void Delay(uint x)
(0086) {
      55 C009      RJMP	0x005F
(0087) 	uint i;
(0088) 	while(x--)
(0089) 	for(i=0;i<80;i++);
      56 2744      CLR	R20
      57 2755      CLR	R21
      58 C002      RJMP	0x005B
      59 5F4F      SUBI	R20,0xFF
      5A 4F5F      SBCI	R21,0xFF
      5B 3540      CPI	R20,0x50
      5C E0E0      LDI	R30,0
      5D 075E      CPC	R21,R30
      5E F3D0      BCS	0x0059
      5F 0118      MOVW	R2,R16
      60 5001      SUBI	R16,1
      61 4010      SBCI	R17,0
      62 2022      TST	R2
      63 F791      BNE	0x0056
      64 2033      TST	R3
      65 F781      BNE	0x0056
      66 9159      LD	R21,Y+
      67 9149      LD	R20,Y+
      68 9508      RET
(0090) }
(0091) //----------------------------------SPI初始化-----------------------------------
(0092) void Spi_initial()
(0093) {
(0094) 	//SPCR=0x50;
(0095) 	//SPSR=0x00;	
(0096) 	SPCR   = (1<<SPE)|(1<<MSTR)|(0<<CPOL)|(0<<SPR0);   // 主机模式，fck/16, SPI方式0
_Spi_initial:
      69 E580      LDI	R24,0x50
      6A B98D      OUT	0x0D,R24
      6B 9508      RET
(0097) }
(0098) //---------------------------------SPI读写程序----------------------------------	
(0099) uchar SpiReadSpiWrite(unsigned char cData)//r
(0100) {
(0101) 	SPDR = cData;
_SpiReadSpiWrite:
  cData                --> R16
      6C B90F      OUT	0x0F,R16
(0102) 	while(!(SPSR & (1<<SPIF) ))
      6D 9B77      SBIS	0x0E,7
      6E CFFE      RJMP	0x006D
(0103) 	{};			// 等待SPI发送完毕
(0104) 	return SPDR;
      6F B10F      IN	R16,0x0F
      70 9508      RET
(0105) }
(0106) //---------------------------------系统状态初始化-------------------------------
(0107) void system_Init(void)			//r
(0108) {
(0109) 
(0110)    	Hign_nrf905_CSN;				// Spi 	disable
_system_Init:
      71 9AC4      SBI	0x18,4
(0111) 	Low_nrf905_SCK;				// Spi clock line init low
      72 98C7      CBI	0x18,7
(0112) 	Low_nrf905_DR;				// Init DR for input
      73 98C2      CBI	0x18,2
(0113) 	Low_nrf905_AM;				// Init AM for input
      74 98C3      CBI	0x18,3
(0114) 	Low_nrf905_CD;				// Init nrf905_CDfor input
      75 9893      CBI	0x12,3
(0115) 	Hign_nrf905_PWR;				// nRF905 power on
      76 9AC1      SBI	0x18,1
(0116) 	Low_nrf905_TRX_CE;			// Set nRF905 in standby mode
      77 9894      CBI	0x12,4
(0117) 	Low_nrf905_TX_EN ;			// set radio in Rx mode
      78 98C0      CBI	0x18,0
      79 9508      RET
_Config905:
  i                    --> R20
      7A 934A      ST	R20,-Y
      7B 935A      ST	R21,-Y
(0118) }
(0119) //--------------------------------NRF905寄存器初始化函数------------------------
(0120) void Config905(void)
(0121) {
(0122) 	uchar i;
(0123) 	Low_nrf905_CSN;	
      7C 98C4      CBI	0x18,4
(0124) 	Delay(1);				// Spi enable for write a spi command
      7D E001      LDI	R16,1
      7E E010      LDI	R17,0
      7F DFD3      RCALL	_Delay
(0125) 	//SpiWrite(WC);				// Write config command写放配置命令
(0126) 	for (i=0;i<11;i++)			// Write configration words  写放配置字
      80 2744      CLR	R20
      81 C009      RJMP	0x008B
(0127) 	{
(0128) 	 SpiReadSpiWrite(RFConf[i]);
      82 E684      LDI	R24,0x64
      83 E090      LDI	R25,0
      84 2FE4      MOV	R30,R20
      85 27FF      CLR	R31
      86 0FE8      ADD	R30,R24
      87 1FF9      ADC	R31,R25
      88 8100      LDD	R16,Z+0
      89 DFE2      RCALL	_SpiReadSpiWrite
      8A 9543      INC	R20
      8B 304B      CPI	R20,0xB
      8C F3A8      BCS	0x0082
(0129) 	}
(0130) 	Hign_nrf905_CSN;					// Disable Spi
      8D 9AC4      SBI	0x18,4
      8E 9159      LD	R21,Y+
      8F 9149      LD	R20,Y+
      90 9508      RET
_TxPacket:
  i                    --> R20
  TxBUF                --> R10
      91 940E 011B CALL	push_xgset300C
      93 0158      MOVW	R10,R16
(0131) }
(0132) //--------------------------------NRF905待发数据打包----------------------------
(0133) void TxPacket(uchar TxBUF[4])
(0134) {
(0135) 	uchar i;
(0136) 	Low_nrf905_CSN;		   						// 使能Spi，允许对nrf905进行读写操作
      94 98C4      CBI	0x18,4
(0137) 	Delay(1);
      95 E001      LDI	R16,1
      96 E010      LDI	R17,0
      97 DFBB      RCALL	_Delay
(0138) 	SpiReadSpiWrite(WTP);				// 写数据前先写写数据命令
      98 E200      LDI	R16,0x20
      99 DFD2      RCALL	_SpiReadSpiWrite
(0139) 	for (i=0;i<4;i++)
      9A 2744      CLR	R20
      9B C007      RJMP	0x00A3
(0140) 	{
(0141) 	SpiReadSpiWrite(TxBUF[i]);		// 待发送的32字节数据
      9C 2FE4      MOV	R30,R20
      9D 27FF      CLR	R31
      9E 0DEA      ADD	R30,R10
      9F 1DFB      ADC	R31,R11
      A0 8100      LDD	R16,Z+0
      A1 DFCA      RCALL	_SpiReadSpiWrite
      A2 9543      INC	R20
      A3 3044      CPI	R20,4
      A4 F3B8      BCS	0x009C
(0142) 	}						
(0143) 	Hign_nrf905_CSN;
      A5 9AC4      SBI	0x18,4
(0144) 	Delay(1);							// 关闭Spi，不允许对nrf905进行读写操作
      A6 E001      LDI	R16,1
      A7 E010      LDI	R17,0
      A8 DFAA      RCALL	_Delay
(0145) 	Low_nrf905_CSN;								// 使能Spi
      A9 98C4      CBI	0x18,4
(0146) 	SpiReadSpiWrite(WTA);				// 写地址前首先先写地址命令
      AA E202      LDI	R16,0x22
      AB DFC0      RCALL	_SpiReadSpiWrite
(0147) 	for (i=0;i<4;i++)					// 写 4 bytes 地址
      AC 2744      CLR	R20
      AD C009      RJMP	0x00B7
(0148) 	{
(0149) 	SpiReadSpiWrite(TxAddress[i]);
      AE E680      LDI	R24,0x60
      AF E090      LDI	R25,0
      B0 2FE4      MOV	R30,R20
      B1 27FF      CLR	R31
      B2 0FE8      ADD	R30,R24
      B3 1FF9      ADC	R31,R25
      B4 8100      LDD	R16,Z+0
      B5 DFB6      RCALL	_SpiReadSpiWrite
      B6 9543      INC	R20
      B7 3044      CPI	R20,4
      B8 F3A8      BCS	0x00AE
(0150) 	}
(0151) 	Hign_nrf905_CSN;					// 关闭Spi
      B9 9AC4      SBI	0x18,4
(0152) 	Hign_nrf905_TRX_CE;					// Set TRX_CE high,start Tx data transmission
      BA 9A94      SBI	0x12,4
(0153) 	Delay(1);							// 等待DR变高
      BB E001      LDI	R16,1
      BC E010      LDI	R17,0
      BD DF95      RCALL	_Delay
(0154) 	Low_nrf905_TRX_CE;							// 设置TRX_CE=0
      BE 9894      CBI	0x12,4
      BF 940C 0120 JMP	pop_xgset300C
(0155) }
(0156) //-------------------------------发送模式激发-----------------------------------
(0157) void SetTxMode(void)
(0158) {
(0159) 	Low_nrf905_TRX_CE;				//
_SetTxMode:
      C1 9894      CBI	0x12,4
(0160) 	Hign_nrf905_TX_EN;				//发送使能
      C2 9AC0      SBI	0x18,0
(0161) 	Delay(2); 				// delay for mode change(>=650us)根据晶振不同要改变
      C3 E002      LDI	R16,2
      C4 E010      LDI	R17,0
      C5 DF8D      RCALL	_Delay
      C6 9508      RET
_main:
  temp                 --> Y,+0
  j                    --> Y,+1
  i                    --> Y,+1
      C7 97EF      SBIW	R28,0x3F
      C8 9721      SBIW	R28,1
(0162) }
(0163) //------------------------------主函数------------------------------------------
(0164) void main(void)
(0165) {  
(0166) 	uint i,j,temp[32];
(0167) 	DDRD=0x32;		  //
      C9 E382      LDI	R24,0x32
      CA BB81      OUT	0x11,R24
(0168) 	DDRB=0xB3;		  //
      CB EB83      LDI	R24,0xB3
      CC BB87      OUT	0x17,R24
(0169) 	DDRA=0x8f;		  //
      CD E88F      LDI	R24,0x8F
      CE BB8A      OUT	0x1A,R24
(0170) 	PORTA=0x00;
      CF 2422      CLR	R2
      D0 BA2B      OUT	0x1B,R2
(0171) 	PORTC=0xbf;
      D1 EB8F      LDI	R24,0xBF
      D2 BB85      OUT	0x15,R24
(0172) 	 High_BELL;
      D3 9A95      SBI	0x12,5
(0173) 	 Hign_JDQ;
      D4 9A97      SBI	0x12,7
(0174) 	Spi_initial();
      D5 DF93      RCALL	_Spi_initial
(0175) 	system_Init();
      D6 DF9A      RCALL	_system_Init
(0176) 	Config905();
      D7 DFA2      RCALL	_Config905
(0177) 	Delay(500);
      D8 EF04      LDI	R16,0xF4
      D9 E011      LDI	R17,1
      DA DF78      RCALL	_Delay
      DB C03B      RJMP	0x0117
(0178) 	while(1)
(0179)  {
(0180) 	//TX();
(0181) 
(0182) //------------------------------------------------------------------------------
(0183) 	if((PINA & 0x10) == 0x00)						//有键按下
      DC 99CC      SBIC	0x19,4
      DD C011      RJMP	0x00EF
(0184) 	{
(0185) 	 while(!(PINA & 0x10));   			//等待按键松开  RED
      DE 9BCC      SBIS	0x19,4
      DF CFFE      RJMP	0x00DE
(0186) 	 TxRxBuf[0]=0x31;
      E0 E381      LDI	R24,0x31
      E1 9380 006F STS	TxRxBuf,R24
(0187) 	 TxRxBuf[1]=0x31;
      E3 9380 0070 STS	TxRxBuf+1,R24
(0188) 	 TxRxBuf[2]=0x29;
      E5 E289      LDI	R24,0x29
      E6 9380 0071 STS	TxRxBuf+2,R24
(0189) 	 TxRxBuf[3]=0x30;   
      E8 E380      LDI	R24,0x30
      E9 9380 0072 STS	TxRxBuf+3,R24
(0190) 
(0191) //------------------------------------------------------------------------------
(0192)      SetTxMode();
      EB DFD5      RCALL	_SetTxMode
(0193) 	 TxPacket(TxRxBuf);													
      EC E60F      LDI	R16,0x6F
      ED E010      LDI	R17,0
      EE DFA2      RCALL	_TxPacket
(0194) 	}
(0195) //------------------------------------------------------------------------------
(0196) 	if((PINA & 0x20) == 0x00)		//有键按下
      EF 99CD      SBIC	0x19,5
      F0 C012      RJMP	0x0103
(0197) 	{
(0198) while(!(PINA & 0x20));   			//等待按键松开GREEN
      F1 9BCD      SBIS	0x19,5
      F2 CFFE      RJMP	0x00F1
(0199) 	 TxRxBuf[0]=0x30;
      F3 E380      LDI	R24,0x30
      F4 9380 006F STS	TxRxBuf,R24
(0200) 	 TxRxBuf[1]=0x31;
      F6 E381      LDI	R24,0x31
      F7 9380 0070 STS	TxRxBuf+1,R24
(0201) 	 TxRxBuf[2]=0x32;
      F9 E382      LDI	R24,0x32
      FA 9380 0071 STS	TxRxBuf+2,R24
(0202) 	 TxRxBuf[3]=0x29;    
      FC E289      LDI	R24,0x29
      FD 9380 0072 STS	TxRxBuf+3,R24
(0203) //------------------------------------------------------------------------------
(0204)      SetTxMode();			        // 设置进入发送状态
      FF DFC1      RCALL	_SetTxMode
(0205) 	 TxPacket(TxRxBuf);			    // 装载待发送数据
     100 E60F      LDI	R16,0x6F
     101 E010      LDI	R17,0
     102 DF8E      RCALL	_TxPacket
(0206) 	 }
(0207) //------------------------------------------------------------------------------
(0208) 	if((PINA & 0x40) == 0x00)	    //有键按下
     103 99CE      SBIC	0x19,6
     104 C012      RJMP	0x0117
(0209) 	{
(0210) 	while(!(PINA & 0x40));   		//等待按键松开GREEN
     105 9BCE      SBIS	0x19,6
     106 CFFE      RJMP	0x0105
(0211)  	 TxRxBuf[0]=0x29;
     107 E289      LDI	R24,0x29
     108 9380 006F STS	TxRxBuf,R24
(0212) 	 TxRxBuf[1]=0x30;
     10A E380      LDI	R24,0x30
     10B 9380 0070 STS	TxRxBuf+1,R24
(0213) 	 TxRxBuf[2]=0x31;
     10D E381      LDI	R24,0x31
     10E 9380 0071 STS	TxRxBuf+2,R24
(0214) 	 TxRxBuf[3]=0x32;  
     110 E382      LDI	R24,0x32
     111 9380 0072 STS	TxRxBuf+3,R24
(0215) //------------------------------------------------------------------------------
(0216)      SetTxMode();                   // 设置进入发送状态
     113 DFAD      RCALL	_SetTxMode
(0217) 	 TxPacket(TxRxBuf);             // 装载待发送数据
FILE: <library>
     114 E60F      LDI	R16,0x6F
     115 E010      LDI	R17,0
     116 DF7A      RCALL	_TxPacket
     117 CFC4      RJMP	0x00DC
     118 96EF      ADIW	R28,0x3F
     119 9621      ADIW	R28,1
     11A 9508      RET
push_xgset300C:
     11B 935A      ST	R21,-Y
     11C 934A      ST	R20,-Y
     11D 92BA      ST	R11,-Y
     11E 92AA      ST	R10,-Y
     11F 9508      RET
pop_xgset300C:
     120 90A9      LD	R10,Y+
     121 90B9      LD	R11,Y+
     122 9149      LD	R20,Y+
     123 9159      LD	R21,Y+
     124 9508      RET
