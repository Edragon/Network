__text_start:
__start:
    0037 E5CF      LDI	R28,0x5F
    0038 E0D4      LDI	R29,4
    0039 BFCD      OUT	0x3D,R28
    003A BFDE      OUT	0x3E,R29
    003B 51C0      SUBI	R28,0x10
    003C 40D0      SBCI	R29,0
    003D EA0A      LDI	R16,0xAA
    003E 8308      STD	Y+0,R16
    003F 2400      CLR	R0
    0040 E7E9      LDI	R30,0x79
    0041 E0F0      LDI	R31,0
    0042 E010      LDI	R17,0
    0043 37EE      CPI	R30,0x7E
    0044 07F1      CPC	R31,R17
    0045 F011      BEQ	0x0048
    0046 9201      ST	R0,Z+
    0047 CFFB      RJMP	0x0043
    0048 8300      STD	Z+0,R16
    0049 E5E4      LDI	R30,0x54
    004A E0F0      LDI	R31,0
    004B E6A0      LDI	R26,0x60
    004C E0B0      LDI	R27,0
    004D E010      LDI	R17,0
    004E 36ED      CPI	R30,0x6D
    004F 07F1      CPC	R31,R17
    0050 F021      BEQ	0x0055
    0051 95C8      LPM
    0052 9631      ADIW	R30,1
    0053 920D      ST	R0,X+
    0054 CFF9      RJMP	0x004E
    0055 940E00CD  CALL	_main
_exit:
    0057 CFFF      RJMP	_exit
_Delay:
  i                    --> R20
  x                    --> R16
    0058 940E0145  CALL	push_gset1
FILE: C:\DOCUME~1\Administrator\桌面\JASK2001软件开发包\M16-NRF905开发包\无线计分系统\NRF905_发送\jfp_fasong.c
(0001) //ICC-AVR application builder : 2007-8-11 20:37:32
(0002) // Target : M16
(0003) // Crystal: 8.0000Mhz
(0004) #include <iom16v.h>
(0005) #include <macros.h>
(0006) #define uint  unsigned int
(0007) #define uchar unsigned char
(0008) ///////////////////////////模式控制定义/////////////////////////////////
(0009) //#define  nrf905_TX_EN	  PB0	    //输出1   
(0010) #define   Low_nrf905_TX_EN     PORTB &= ~(1 << PB0)
(0011) #define   Hign_nrf905_TX_EN    PORTB |= (1 << PB0)
(0012) //#define  nrf905_TRX_CE  PD4	    //输出1
(0013) #define   Hign_nrf905_TRX_CE    PORTD |= (1 << PD4)  
(0014) #define   Low_nrf905_TRX_CE     PORTD &= ~(1 << PD4) 
(0015) //#define  nrf905_PWR     PB1 	    //输出1
(0016) #define   Hign_nrf905_PWR    PORTB |= (1 << PB1) 
(0017) #define   Low_nrf905_PWR     PORTB &= ~(1 << PB1)
(0018) //--------------------------------SPI口定义-------------------------------------
(0019) //#define  nrf905_MISO	  PB6   	//输入0
(0020) //#define  nrf905_MOSI    PB5	    //输出1
(0021) //#define  nrf905_SCK     PB7	    //输出1
(0022) #define   Low_nrf905_SCK     PORTB &= ~(1 << PB7)
(0023) //------------------------------------------------------------------------------
(0024) //#define  nrf905_CSN     PB4		//输出1		
(0025) #define   Hign_nrf905_CSN    PORTB |= (1 << PB4)  
(0026) #define   Low_nrf905_CSN     PORTB &= ~(1 << PB4)				
(0027) //-------------------------------状态输出口-------------------------------------
(0028) //#define  nrf905_CD      PD3	    //输入0
(0029) #define   Hign_nrf905_CD    PORTD |= (1 << PD3) 
(0030) #define   Low_nrf905_CD     PORTD &= ~(1 << PD3) 
(0031) #define   Read_nrf905_CD    PINB & (1 << PD3)
(0032) //#define  nrf905_AM      PB3	    //输入0
(0033) #define   Hign_nrf905_AM    PORTB |= (1 << PB3) 
(0034) #define   Low_nrf905_AM     PORTB &= ~(1 << PB3)
(0035) #define   Read_nrf905_AM    PINB & (1 << PB3)
(0036) //#define  nrf905_DR      PB2  		//输入0
(0037) #define   Hign_nrf905_DR    PORTB |= (1 << PB2)
(0038) #define   Low_nrf905_DR     PORTB &= ~(1 << PB2)
(0039) #define   Read_nrf905_DR    PINB & (1 << PB2)
(0040) //读取键值KEY2-KEY3-KEY4  
(0041) #define   Read_KEY_2  	    PINA & (1 << PA5)        
(0042) //甲队加3分
(0043) #define   Read_KEY_3    	PINA & (1 << PA6)
(0044) //乙队加2分
(0045) #define   Read_KEY_4   	    PINA & (1 << PA7)   
(0046) //乙队加3分
(0047) //------------------------------数码管位选--------------------------------------
(0048) //#define Display1   PA1  		    //输出1
(0049) #define   Hign_Display1     PORTA |= (1 << PA1);   
(0050) #define   Low_Display1    PORTA &= ~(1 << PA1); 
(0051) //#define Display2      PA2  		//输出1
(0052) #define   Hign_Display2     PORTA |= (1 << PA2);   
(0053) #define   Low_Display2    PORTA &= ~(1 << PA2); 
(0054) //#define Display3     PA3  		//输出1
(0055) #define   Hign_Display3     PORTA |= (1 << PA3);   
(0056) #define   Low_Display3     PORTA &= ~(1 << PA3); 
(0057) //#define Display4      PA4 		//输出1
(0058) #define   Hign_Display4     PORTA |= (1 << PA4);   
(0059) #define   Low_Display4     PORTA &= ~(1 << PA4); 
(0060) //-------------------------------BELL蜂明器-------------------------------------
(0061) #define   Hign_BELL  PORTD |= (1 << PD5);   
(0062) #define   Low_BELL     PORTD &= ~(1 << PD5); 
(0063) //-------------------------------JDQ继电器--------------------------------------
(0064) #define   Hign_JDQ  PORTD |= (1 << PD7)
(0065) #define   Low_JDQ     PORTD &= ~(1 << PD7)
(0066) //----------------------------------905-SPI指令---------------------------------
(0067) #define WC	0x00
(0068) #define RRC	0x10
(0069) #define WTP	0x20
(0070) #define RTP	0x21
(0071) #define WTA	0x22
(0072) #define RTA	0x23
(0073) #define RRP	0x24
(0074) //---------------------------------发送数据缓冲区-------------------------------
(0075) uchar TxRxBuf[4];
(0076) //----------------------------------接收地址------------------------------------
(0077) uchar TxAddress[4]={0xcc,0xcc,0xcc,0xcc };    
(0078) uchar tf;
(0079) uchar seg[10]={0xC0,0xCF,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};         //0~~9段码
(0080) //------------------------------------------------------------------------------
(0081) //----------------------------------寄存器配置----------------------------------
(0082) uchar RFConf[11]=
(0083) {
(0084)   0x00,                             //配置命令//
(0085)   0x4c,                             //CH_NO,配置频段在430MHZ
(0086)   0x0C,                             //输出功率为10db,不重发，节电为正常模式
(0087)   0x44,                             //地址宽度设置，为4字节
(0088)   0x04,0x04,                        //接收发送有效数据长度为4字节
(0089)   0xCC,0xCC,0xCC,0xCC,              //接收地址
(0090)   0x58,                              //CRC充许，8位CRC校验，外部时钟信号不使能，16M晶振
(0091) };
(0092) //----------------------------------函数申明------------------------------------
(0093) void Delay(uint x);
(0094) void Spi_initial();
(0095) uchar SpiReadSpiWrite(uchar DATA);
(0096) void system_Init(void);
(0097) void Config905(void);
(0098) void TxPacket(uchar TxBUF[4]);
(0099) void SetTxMode(void);
(0100) void TX(void);
(0101) void StartUART(void);
(0102) void R_S_Byte(uchar R_Byte);
(0103) //----------------------------------100us延时子程序-----------------------------
(0104) void Delay(uint x)
(0105) {
    005A C009      RJMP	0x0064
(0106) 	uint i;
(0107) 	while(x--)
(0108) 	for(i=0;i<80;i++);
    005B 2744      CLR	R20
    005C 2755      CLR	R21
    005D C002      RJMP	0x0060
    005E 5F4F      SUBI	R20,0xFF
    005F 4F5F      SBCI	R21,0xFF
    0060 3540      CPI	R20,0x50
    0061 E0E0      LDI	R30,0
    0062 075E      CPC	R21,R30
    0063 F3D0      BCS	0x005E
    0064 0118      MOVW	R2,R16
    0065 5001      SUBI	R16,1
    0066 4010      SBCI	R17,0
    0067 2022      TST	R2
    0068 F791      BNE	0x005B
    0069 2033      TST	R3
    006A F781      BNE	0x005B
    006B 940E0148  CALL	pop_gset1
    006D 9508      RET
(0109) }
(0110) //----------------------------------SPI初始化-----------------------------------
(0111) void Spi_initial()
(0112) {
(0113) 	//SPCR=0x50;
(0114) 	//SPSR=0x00;	
(0115) 	SPCR   = (1<<SPE)|(1<<MSTR)|(0<<CPOL)|(0<<SPR0);   // 主机模式，fck/16, SPI方式0
_Spi_initial:
    006E E580      LDI	R24,0x50
    006F B98D      OUT	0x0D,R24
    0070 9508      RET
(0116) }
(0117) //---------------------------------SPI读写程序----------------------------------	
(0118) uchar SpiReadSpiWrite(unsigned char cData)//r
(0119) {
(0120) 	SPDR = cData;
_SpiReadSpiWrite:
  cData                --> R16
    0071 B90F      OUT	0x0F,R16
(0121) 	while(!(SPSR & (1<<SPIF) ))
    0072 9B77      SBIS	0x0E,7
    0073 CFFE      RJMP	0x0072
(0122) 	{};			// 等待SPI发送完毕
(0123) 	return SPDR;
    0074 B10F      IN	R16,0x0F
    0075 9508      RET
(0124) }
(0125) //---------------------------------系统状态初始化-------------------------------
(0126) void system_Init(void)			//r
(0127) {
(0128) 
(0129)    	Hign_nrf905_CSN;				// Spi 	disable
_system_Init:
    0076 9AC4      SBI	0x18,4
(0130) 	Low_nrf905_SCK;				// Spi clock line init low
    0077 98C7      CBI	0x18,7
(0131) 	Low_nrf905_DR;				// Init DR for input
    0078 98C2      CBI	0x18,2
(0132) 	Low_nrf905_AM;				// Init AM for input
    0079 98C3      CBI	0x18,3
(0133) 	Low_nrf905_CD;				// Init nrf905_CDfor input
    007A 9893      CBI	0x12,3
(0134) 	Hign_nrf905_PWR;				// nRF905 power on
    007B 9AC1      SBI	0x18,1
(0135) 	Low_nrf905_TRX_CE;			// Set nRF905 in standby mode
    007C 9894      CBI	0x12,4
(0136) 	Low_nrf905_TX_EN ;			// set radio in Rx mode
    007D 98C0      CBI	0x18,0
    007E 9508      RET
_Config905:
  i                    --> R20
    007F 940E0145  CALL	push_gset1
(0137) }
(0138) //--------------------------------NRF905寄存器初始化函数------------------------
(0139) void Config905(void)
(0140) {
(0141) 	uchar i;
(0142) 	Low_nrf905_CSN;	
    0081 98C4      CBI	0x18,4
(0143) 	Delay(1);				// Spi enable for write a spi command
    0082 E001      LDI	R16,1
    0083 E010      LDI	R17,0
    0084 DFD3      RCALL	_Delay
(0144) 	//SpiWrite(WC);				// Write config command写放配置命令
(0145) 	for (i=0;i<11;i++)			// Write configration words  写放配置字
    0085 2744      CLR	R20
    0086 C009      RJMP	0x0090
(0146) 	{
(0147) 	 SpiReadSpiWrite(RFConf[i]);
    0087 E68E      LDI	R24,0x6E
    0088 E090      LDI	R25,0
    0089 2FE4      MOV	R30,R20
    008A 27FF      CLR	R31
    008B 0FE8      ADD	R30,R24
    008C 1FF9      ADC	R31,R25
    008D 8100      LDD	R16,Z+0
    008E DFE2      RCALL	_SpiReadSpiWrite
    008F 9543      INC	R20
    0090 304B      CPI	R20,0xB
    0091 F3A8      BCS	0x0087
(0148) 	}
(0149) 	Hign_nrf905_CSN;					// Disable Spi
    0092 9AC4      SBI	0x18,4
    0093 940E0148  CALL	pop_gset1
    0095 9508      RET
_TxPacket:
  i                    --> R20
  TxBUF                --> R22
    0096 940E0143  CALL	push_gset2
    0098 01B8      MOVW	R22,R16
(0150) }
(0151) //--------------------------------NRF905待发数据打包----------------------------
(0152) void TxPacket(uchar TxBUF[4])
(0153) {
(0154) 	uchar i;
(0155) 	Low_nrf905_CSN;		   						// 使能Spi，允许对nrf905进行读写操作
    0099 98C4      CBI	0x18,4
(0156) 	Delay(1);
    009A E001      LDI	R16,1
    009B E010      LDI	R17,0
    009C DFBB      RCALL	_Delay
(0157) 	SpiReadSpiWrite(WTP);				// 写数据前先写写数据命令
    009D E200      LDI	R16,0x20
    009E DFD2      RCALL	_SpiReadSpiWrite
(0158) 	for (i=0;i<4;i++)
    009F 2744      CLR	R20
    00A0 C007      RJMP	0x00A8
(0159) 	{
(0160) 	SpiReadSpiWrite(TxBUF[i]);		// 待发送的32字节数据
    00A1 2FE4      MOV	R30,R20
    00A2 27FF      CLR	R31
    00A3 0FE6      ADD	R30,R22
    00A4 1FF7      ADC	R31,R23
    00A5 8100      LDD	R16,Z+0
    00A6 DFCA      RCALL	_SpiReadSpiWrite
    00A7 9543      INC	R20
    00A8 3044      CPI	R20,4
    00A9 F3B8      BCS	0x00A1
(0161) 	}						
(0162) 	Hign_nrf905_CSN;
    00AA 9AC4      SBI	0x18,4
(0163) 	Delay(1);							// 关闭Spi，不允许对nrf905进行读写操作
    00AB E001      LDI	R16,1
    00AC E010      LDI	R17,0
    00AD DFAA      RCALL	_Delay
(0164) 	Low_nrf905_CSN;								// 使能Spi
    00AE 98C4      CBI	0x18,4
(0165) 	SpiReadSpiWrite(WTA);				// 写地址前首先先写地址命令
    00AF E202      LDI	R16,0x22
    00B0 DFC0      RCALL	_SpiReadSpiWrite
(0166) 	for (i=0;i<4;i++)					// 写 4 bytes 地址
    00B1 2744      CLR	R20
    00B2 C009      RJMP	0x00BC
(0167) 	{
(0168) 	SpiReadSpiWrite(TxAddress[i]);
    00B3 E680      LDI	R24,0x60
    00B4 E090      LDI	R25,0
    00B5 2FE4      MOV	R30,R20
    00B6 27FF      CLR	R31
    00B7 0FE8      ADD	R30,R24
    00B8 1FF9      ADC	R31,R25
    00B9 8100      LDD	R16,Z+0
    00BA DFB6      RCALL	_SpiReadSpiWrite
    00BB 9543      INC	R20
    00BC 3044      CPI	R20,4
    00BD F3A8      BCS	0x00B3
(0169) 	}
(0170) 	Hign_nrf905_CSN;					// 关闭Spi
    00BE 9AC4      SBI	0x18,4
(0171) 	Hign_nrf905_TRX_CE;					// Set TRX_CE high,start Tx data transmission
    00BF 9A94      SBI	0x12,4
(0172) 	Delay(1);							// 等待DR变高
    00C0 E001      LDI	R16,1
    00C1 E010      LDI	R17,0
    00C2 DF95      RCALL	_Delay
(0173) 	Low_nrf905_TRX_CE;							// 设置TRX_CE=0
    00C3 9894      CBI	0x12,4
    00C4 940E013A  CALL	pop_gset2
    00C6 9508      RET
(0174) }
(0175) //-------------------------------发送模式激发-----------------------------------
(0176) void SetTxMode(void)
(0177) {
(0178) 	Low_nrf905_TRX_CE;				//
_SetTxMode:
    00C7 9894      CBI	0x12,4
(0179) 	Hign_nrf905_TX_EN;				//发送使能
    00C8 9AC0      SBI	0x18,0
(0180) 	Delay(2); 				// delay for mode change(>=650us)根据晶振不同要改变
    00C9 E002      LDI	R16,2
    00CA E010      LDI	R17,0
    00CB DF8C      RCALL	_Delay
    00CC 9508      RET
_main:
  temp                 --> Y+0
  j                    --> Y+1
  i                    --> Y+1
    00CD 97EF      SBIW	R28,0x3F
    00CE 9721      SBIW	R28,1
(0181) }
(0182) //------------------------------------------------------------------------
(0183) //------------------------------主函数------------------------------------------
(0184) void main(void)
(0185) {  
(0186) 	uint i,j,temp[32];
(0187) 	DDRD=0xf2;		  //
    00CF EF82      LDI	R24,0xF2
    00D0 BB81      OUT	0x11,R24
(0188) 	DDRB=0xB3;		  //
    00D1 EB83      LDI	R24,0xB3
    00D2 BB87      OUT	0x17,R24
(0189) 	DDRA=0x1e;       //
    00D3 E18E      LDI	R24,0x1E
    00D4 BB8A      OUT	0x1A,R24
(0190) 	DDRC=0xff; 		//LED端口设置
    00D5 EF8F      LDI	R24,0xFF
    00D6 BB84      OUT	0x14,R24
(0191) 	PORTA = 0xff;
    00D7 BB8B      OUT	0x1B,R24
(0192) 	Hign_BELL;
    00D8 9A95      SBI	0x12,5
(0193) 	Hign_JDQ ;
    00D9 9A97      SBI	0x12,7
(0194) 	Spi_initial();
    00DA DF93      RCALL	_Spi_initial
(0195) 	system_Init();
    00DB DF9A      RCALL	_system_Init
(0196) 	Config905();
    00DC DFA2      RCALL	_Config905
    00DD C058      RJMP	0x0136
(0197) 	while(1)
(0198)  {
(0199) //------------------------------------------------------------------------------
(0200) 	if((PINA & 0x20) == 0)		  //有键按下KEY1
    00DE 99CD      SBIC	0x19,5
    00DF C011      RJMP	0x00F1
(0201) 	{
(0202) 	while(!(PINA & 0x20));   			//等待按键松开GREEN
    00E0 9BCD      SBIS	0x19,5
    00E1 CFFE      RJMP	0x00E0
(0203) 	 TxRxBuf[0]=0x29;
    00E2 E289      LDI	R24,0x29
    00E3 9380007A  STS	TxRxBuf,R24
(0204) 	 TxRxBuf[1]=0x30;
    00E5 E380      LDI	R24,0x30
    00E6 9380007B  STS	TxRxBuf+1,R24
(0205) 	 TxRxBuf[2]=0x31;
    00E8 E381      LDI	R24,0x31
    00E9 9380007C  STS	TxRxBuf+2,R24
(0206) 	 TxRxBuf[3]=0x32; 
    00EB E382      LDI	R24,0x32
    00EC 9380007D  STS	TxRxBuf+3,R24
(0207) 	 tf=1;   
    00EE E081      LDI	R24,1
    00EF 93800079  STS	tf,R24
(0208) 	 }
(0209) //------------------------------------------------------------------------------
(0210) 	if((PINA & 0x40) == 0)			//有键按下KEY2
    00F1 99CE      SBIC	0x19,6
    00F2 C011      RJMP	0x0104
(0211) 	{
(0212) 	while(!(PINA & 0x40));   			//等待按键松开GREEN
    00F3 9BCE      SBIS	0x19,6
    00F4 CFFE      RJMP	0x00F3
(0213)  	 TxRxBuf[0]=0x30;
    00F5 E380      LDI	R24,0x30
    00F6 9380007A  STS	TxRxBuf,R24
(0214) 	 TxRxBuf[1]=0x31;
    00F8 E381      LDI	R24,0x31
    00F9 9380007B  STS	TxRxBuf+1,R24
(0215) 	 TxRxBuf[2]=0x32;
    00FB E382      LDI	R24,0x32
    00FC 9380007C  STS	TxRxBuf+2,R24
(0216) 	 TxRxBuf[3]=0x29;  
    00FE E289      LDI	R24,0x29
    00FF 9380007D  STS	TxRxBuf+3,R24
(0217) 	 tf=2;    
    0101 E082      LDI	R24,2
    0102 93800079  STS	tf,R24
(0218) 	 }
(0219) //------------------------------------------------------------------------------
(0220) 	if((PINA & 0x80) == 0)			//有键按下KEY3
    0104 99CF      SBIC	0x19,7
    0105 C011      RJMP	0x0117
(0221) 	{
(0222) 	while(!(PINA & 0x80));   			//等待按键松开GREEN
    0106 9BCF      SBIS	0x19,7
    0107 CFFE      RJMP	0x0106
(0223)  	 TxRxBuf[0]=0x31;
    0108 E381      LDI	R24,0x31
    0109 9380007A  STS	TxRxBuf,R24
(0224) 	 TxRxBuf[1]=0x32;
    010B E382      LDI	R24,0x32
    010C 9380007B  STS	TxRxBuf+1,R24
(0225) 	 TxRxBuf[2]=0x29;
    010E E289      LDI	R24,0x29
    010F 9380007C  STS	TxRxBuf+2,R24
(0226) 	 TxRxBuf[3]=0x30;  
    0111 E380      LDI	R24,0x30
    0112 9380007D  STS	TxRxBuf+3,R24
(0227) 	tf=3;
    0114 E083      LDI	R24,3
    0115 93800079  STS	tf,R24
(0228) 	}
(0229) //------------------------------------------------------------------------------
(0230) 	if(tf)
    0117 90200079  LDS	R2,tf
    0119 2022      TST	R2
    011A F0D9      BEQ	0x0136
(0231) 	{
(0232) 	 PORTC=seg[tf];
    011B E684      LDI	R24,0x64
    011C E090      LDI	R25,0
    011D 2DE2      MOV	R30,R2
    011E 27FF      CLR	R31
    011F 0FE8      ADD	R30,R24
    0120 1FF9      ADC	R31,R25
    0121 8020      LDD	R2,Z+0
    0122 BA25      OUT	0x15,R2
(0233) 	 Low_Display4;
    0123 98DC      CBI	0x1B,4
(0234) 	 Low_Display3;
    0124 98DB      CBI	0x1B,3
(0235) 	 Low_Display2;
    0125 98DA      CBI	0x1B,2
(0236) 	 Low_Display1;
    0126 98D9      CBI	0x1B,1
(0237) 	tf=0;
    0127 2422      CLR	R2
    0128 92200079  STS	tf,R2
(0238) 	Low_JDQ ;
    012A 9897      CBI	0x12,7
(0239) 	SetTxMode();				// 激发数据发s送
    012B DF9B      RCALL	_SetTxMode
(0240) 	TxPacket(TxRxBuf);			// 装载待发送数据	
    012C E70A      LDI	R16,0x7A
    012D E010      LDI	R17,0
    012E DF67      RCALL	_TxPacket
(0241) 	Delay(200); 	
    012F EC08      LDI	R16,0xC8
    0130 E010      LDI	R17,0
    0131 DF26      RCALL	_Delay
(0242) 	TxRxBuf[0]=0;
    0132 2422      CLR	R2
    0133 9220007A  STS	TxRxBuf,R2
(0243) 	Hign_JDQ ;
FILE: <library>
    0135 9A97      SBI	0x12,7
    0136 CFA7      RJMP	0x00DE
    0137 96EF      ADIW	R28,0x3F
    0138 9621      ADIW	R28,1
    0139 9508      RET
pop_gset2:
    013A E0E2      LDI	R30,2
    013B 940C0149  JMP	pop
push_gset5:
    013D 92FA      ST	R15,-Y
    013E 92EA      ST	R14,-Y
push_gset4:
    013F 92DA      ST	R13,-Y
    0140 92CA      ST	R12,-Y
push_gset3:
    0141 92BA      ST	R11,-Y
    0142 92AA      ST	R10,-Y
push_gset2:
    0143 937A      ST	R23,-Y
    0144 936A      ST	R22,-Y
push_gset1:
    0145 935A      ST	R21,-Y
    0146 934A      ST	R20,-Y
    0147 9508      RET
pop_gset1:
    0148 E0E1      LDI	R30,1
pop:
    0149 9149      LD	R20,Y+
    014A 9159      LD	R21,Y+
    014B FDE0      SBRC	R30,0
    014C 9508      RET
    014D 9169      LD	R22,Y+
    014E 9179      LD	R23,Y+
    014F FDE1      SBRC	R30,1
    0150 9508      RET
    0151 90A9      LD	R10,Y+
    0152 90B9      LD	R11,Y+
    0153 FDE2      SBRC	R30,2
    0154 9508      RET
    0155 90C9      LD	R12,Y+
    0156 90D9      LD	R13,Y+
    0157 FDE3      SBRC	R30,3
    0158 9508      RET
    0159 90E9      LD	R14,Y+
    015A 90F9      LD	R15,Y+
    015B 9508      RET
