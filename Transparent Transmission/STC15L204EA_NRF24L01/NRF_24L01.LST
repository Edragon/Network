C51 COMPILER V9.01   NRF_24L01                                                             12/06/2012 10:29:32 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE NRF_24L01
OBJECT MODULE PLACED IN NRF_24L01.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE NRF_24L01.C ROM(COMPACT) OPTIMIZE(6,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "typedef.h"
   2          #include <intrins.h>
   3          #include <string.h>
   4          #include "NRF_24L01.h"
   5          #include "UART.H"
   6          #include "delay.h"
   7          
   8          #define uchar unsigned char
   9          
  10          
  11          uchar const TX_ADDRESS[TX_ADR_WIDTH]  = {0x34,0x43,0x10,0x10,0x01}; // Define a static TX address
  12          
  13          idata uchar rx_buf[TX_PLOAD_WIDTH];
  14          
  15          idata uchar tx_buf[TX_PLOAD_WIDTH];
  16          
  17          uchar flag;
  18          
  19          
  20          
  21          /**************************************************/
  22          
  23          
  24          
  25          //sbit LED1= P3^7;
  26          /**************************************************/
  27          unsigned char   bdata sta;
  28          
  29          sbit    RX_DR   =sta^6;
  30          
  31          sbit    TX_DS   =sta^5;
  32          
  33          sbit    MAX_RT  =sta^4;
  34          /**************************************************/
  35          
  36          /**************************************************
  37          Function: init_io();
  38          Description:
  39            flash led one time,chip enable(ready to TX or RX Mode),
  40            Spi disable,Spi clock line init high
  41          /**************************************************/
  42          #define KEY 0xaa
  43          void init_nrf24l01_io(void)
  44          {
  45   1              CE=0;                   // chip enable
  46   1              CSN=1;                  // Spi disable  
  47   1              SCK=0;                  // Spi clock line init high
  48   1      }
  49          /**************************************************
  50          Function: SPI_RW();
  51          
  52          Description:
  53            Writes one byte to nRF24L01, and return the byte read
  54            from nRF24L01 during write, according to SPI protocol
  55          /**************************************************/
C51 COMPILER V9.01   NRF_24L01                                                             12/06/2012 10:29:32 PAGE 2   

  56          bdata unsigned char st=0;
  57          sbit st_1=st^0;
  58          sbit st_2=st^1;
  59          sbit st_3=st^2;
  60          sbit st_4=st^3;
  61          sbit st_5=st^4;
  62          sbit st_6=st^5;
  63          sbit st_7=st^6;
  64          sbit st_8=st^7;
  65          bdata unsigned char st1=0;
  66          sbit st_11=st1^0;
  67          sbit st_12=st1^1;
  68          sbit st_13=st1^2;
  69          sbit st_14=st1^3;
  70          sbit st_15=st1^4;
  71          sbit st_16=st1^5;
  72          sbit st_17=st1^6;
  73          sbit st_18=st1^7;
  74          /*
  75          uchar SPI_RW(uchar byte)
  76          {
  77                  uchar bit_ctr;
  78                  for(bit_ctr=0;bit_ctr<8;bit_ctr++)   // output 8-bit
  79                  {
  80                          MOSI = (byte & 0x80);         // output 'byte', MSB to MOSI
  81                          byte = (byte << 1);           // shift next bit into MSB..
  82                          SCK = 1;                      // Set SCK high..
  83                          MISO=1;
  84                          byte |= MISO;                     // capture current MISO bit
  85                          SCK = 0;                          // ..then set SCK low again
  86                  }
  87              return(byte);                         // return read byte
  88          }
  89          */
  90          
  91          uchar SPI_RW(uchar byte)
  92          {
  93   1              //uchar bit_ctr;
  94   1      
  95   1          st=byte;
  96   1      
  97   1          MOSI=st_8;
  98   1          SCK = 1;
  99   1          st_18=MISO;
 100   1          SCK = 0;
 101   1      
 102   1          MOSI=st_7;
 103   1          SCK = 1;
 104   1          st_17=MISO;
 105   1          SCK = 0;
 106   1      
 107   1          MOSI=st_6;
 108   1          SCK = 1;
 109   1          st_16=MISO;
 110   1          SCK = 0;
 111   1      
 112   1          MOSI=st_5;
 113   1          SCK = 1;
 114   1          st_15=MISO;
 115   1          SCK = 0;
 116   1      
 117   1          MOSI=st_4;
C51 COMPILER V9.01   NRF_24L01                                                             12/06/2012 10:29:32 PAGE 3   

 118   1          SCK = 1;
 119   1          st_14=MISO;
 120   1          SCK = 0;
 121   1      
 122   1          MOSI=st_3;
 123   1          SCK = 1;
 124   1          st_13=MISO;
 125   1          SCK = 0;
 126   1      
 127   1          MOSI=st_2;
 128   1          SCK = 1;
 129   1          st_12=MISO;
 130   1          SCK = 0;
 131   1      
 132   1          MOSI=st_1;
 133   1          SCK = 1;
 134   1          st_11=MISO;
 135   1          SCK = 0;
 136   1          return(st1);                          // return read byte
 137   1      }
 138          /**************************************************/
 139          
 140          /**************************************************
 141          Function: SPI_RW_Reg();
 142          
 143          Description:
 144            Writes value 'value' to register 'reg'
 145          /**************************************************/
 146          uchar SPI_RW_Reg(BYTE reg, BYTE value)
 147          {
 148   1              uchar status;
 149   1              CSN = 0;                   // CSN low, init SPI transaction
 150   1              status = SPI_RW(reg);      // select register
 151   1              SPI_RW(value);             // ..and write value to it..
 152   1              CSN = 1;                   // CSN high again
 153   1              return(status);            // return nRF24L01 status byte
 154   1      }
 155          /**************************************************/
 156          
 157          /**************************************************
 158          Function: SPI_Read();
 159          
 160          Description:
 161            Read one byte from nRF24L01 register, 'reg'
 162          /**************************************************/
 163          BYTE SPI_Read(BYTE reg)
 164          {
 165   1              BYTE reg_val;
 166   1      
 167   1              CSN = 0;                // CSN low, initialize SPI communication...
 168   1              SPI_RW(reg);            // Select register to read from..
 169   1              reg_val = SPI_RW(0);    // ..then read registervalue
 170   1              CSN = 1;                // CSN high, terminate SPI communication
 171   1      
 172   1              return(reg_val);        // return register value
 173   1      }
 174          /**************************************************/
 175          
 176          /**************************************************
 177          Function: SPI_Read_Buf();
 178          
 179          Description:
C51 COMPILER V9.01   NRF_24L01                                                             12/06/2012 10:29:32 PAGE 4   

 180            Reads 'bytes' #of bytes from register 'reg'
 181            Typically used to read RX payload, Rx/Tx address
 182          /**************************************************/
 183          uchar SPI_Read_Buf(BYTE reg, BYTE *pBuf, BYTE bytes)
 184          {
 185   1              uchar status,byte_ctr;
 186   1      
 187   1              CSN = 0;                                // Set CSN low, init SPI tranaction
 188   1              status = SPI_RW(reg);                   // Select register to write to and read status byte
 189   1      
 190   1              for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
 191   1              pBuf[byte_ctr] = SPI_RW(0);    // Perform SPI_RW to read byte from nRF24L01
 192   1      
 193   1              CSN = 1;                           // Set CSN high again
 194   1      
 195   1              return(status);                    // return nRF24L01 status byte
 196   1      }
 197          /**************************************************/
 198          
 199          /**************************************************
 200          Function: SPI_Write_Buf();
 201          
 202          Description:
 203            Writes contents of buffer '*pBuf' to nRF24L01
 204            Typically used to write TX payload, Rx/Tx address
 205          /**************************************************/
 206          uchar SPI_Write_Buf(BYTE reg, BYTE *pBuf, BYTE bytes)
 207          {
 208   1              uchar status,byte_ctr;
 209   1      
 210   1              CSN = 0;                   // Set CSN low, init SPI tranaction
 211   1              status = SPI_RW(reg);    // Select register to write to and read status byte
 212   1              for(byte_ctr=0; byte_ctr<bytes; byte_ctr++) // then write all byte in buffer(*pBuf)
 213   1              SPI_RW(*pBuf++);
 214   1              CSN = 1;                 // Set CSN high again
 215   1              return(status);          // return nRF24L01 status byte
 216   1      }
 217          /**************************************************/
 218          
 219          /**************************************************
 220          Function: RX_Mode();
 221          
 222          Description:
 223            This function initializes one nRF24L01 device to
 224            RX Mode, set RX address, writes RX payload width,
 225            select RF channel, datarate & LNA HCURR.
 226            After init, CE is toggled high, which means that
 227            this device is now ready to receive a datapacket.
 228          /**************************************************/
 229          void power_off()
 230          {
 231   1          CE=0;
 232   1          SPI_RW_Reg(WRITE_REG + CONFIG, 0x0D); 
 233   1          CE=1;
 234   1          _delay_us(20);
 235   1      }
 236          void ifnnrf_rx_mode(void)
 237          {
 238   1          power_off();
 239   1              CE=0;
 240   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // Use the same address on the RX devi
             -ce as the TX device
C51 COMPILER V9.01   NRF_24L01                                                             12/06/2012 10:29:32 PAGE 5   

 241   1      
 242   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0
 243   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0
 244   1              SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40
 245   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH); // Select same RX payload width as TX Payload width
 246   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x26);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR
 247   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);     // Set PWR_UP bit, enable CRC(2 bytes) & Prim:RX. RX_DR enabl
             -ed..
 248   1      
 249   1              CE = 1; // Set CE pin high to enable RX device
 250   1      
 251   1        //  This device is now ready to receive one packet of 16 bytes payload from a TX device sending to addre
             -ss
 252   1        //  '3443101001', with auto acknowledgment, retransmit count of 10, RF channel 40 and datarate = 2Mbps.
 253   1      
 254   1      }
 255          /**************************************************/
 256          
 257          /**************************************************
 258          Function: TX_Mode();
 259          
 260          Description:
 261            This function initializes one nRF24L01 device to
 262            TX mode, set TX address, set RX address for auto.ack,
 263            fill TX payload, select RF channel, datarate & TX pwr.
 264            PWR_UP is set, CRC(2 bytes) is enabled, & PRIM:TX.
 265          
 266            ToDo: One high pulse(>10us) on CE will now send this
 267            packet and expext an acknowledgment from the RX device.
 268          /**************************************************/
 269          void ifnnrf_tx_mode(void)
 270          {
 271   1          power_off();
 272   1              CE=0;
 273   1              
 274   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // Writes TX_Address to nRF24L01
 275   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // RX_Addr0 same as TX_Adr for Auto.Ac
             -k
 276   1              SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); // Writes data to TX payload
 277   1      
 278   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0
 279   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0
 280   1              SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...
 281   1              SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40
 282   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x26);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR
 283   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);     // Set PWR_UP bit, enable CRC(2 bytes) & Prim:TX. MAX_RT & TX
             -_DS enabled..
 284   1              CE=1;
 285   1      
 286   1      }
 287          
 288          void SPI_CLR_Reg(BYTE R_T)
 289          {
 290   1              CSN = 0; 
 291   1              if(R_T==1)                  // CSN low, init SPI transaction
 292   1              SPI_RW(FLUSH_TX);             // ..and write value to it..
 293   1              else
 294   1              SPI_RW(FLUSH_RX);             // ..and write value to it..
 295   1              CSN = 1;                   // CSN high again
 296   1      }
 297          
 298          void ifnnrf_CLERN_ALL()
C51 COMPILER V9.01   NRF_24L01                                                             12/06/2012 10:29:32 PAGE 6   

 299          {
 300   1        SPI_CLR_Reg(0);
 301   1        SPI_CLR_Reg(1);
 302   1        SPI_RW_Reg(WRITE_REG+STATUS,0xff);
 303   1        IRQ=1;
 304   1      }
 305          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    453    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9      10
   IDATA SIZE       =     64    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
