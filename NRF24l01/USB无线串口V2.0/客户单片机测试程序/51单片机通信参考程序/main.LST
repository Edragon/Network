C51 COMPILER V9.00   MAIN                                                                  11/07/2015 11:14:23 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /**********************************************************/
   2          /* 名   称：NRF24L01+无线USB通信模块程序                  */
   3          /* 功   能：发送接收测试程序                              */
   4          /*          格式：首位是个数，后面跟要发送的数据          */ 
   5          /*                例如：发送5个字节 11 22 33 44 55(16进制)*/
   6          /*                电脑串口发送：1122334455                */
   7          /*                模块实际发送：051122334455              */     
   8          /* 作者：BQDZ     （论坛：http://bqdz.taobao.com）        */
   9          /* 联系方式： QQ :851968194     旺旺：王亚坤2864          */
  10          /*           手机：15821472722（上海）                    */
  11          /**********************************************************/
  12          #include<reg51.h>
  13          #include<intrins.h>
  14          #define uchar unsigned char
  15          #define uint  unsigned int
  16          
  17          /**********  NRF24L01寄存器操作命令  ***********/
  18          #define READ_REG        0x00  //读配置寄存器,低5位为寄存器地址
  19          #define WRITE_REG       0x20  //写配置寄存器,低5位为寄存器地址
  20          #define RD_RX_PLOAD     0x61  //读RX有效数据,1~32字节
  21          #define WR_TX_PLOAD     0xA0  //写TX有效数据,1~32字节
  22          #define FLUSH_TX        0xE1  //清除TX FIFO寄存器.发射模式下用
  23          #define FLUSH_RX        0xE2  //清除RX FIFO寄存器.接收模式下用
  24          #define REUSE_TX_PL     0xE3  //重新使用上一包数据,CE为高,数据包被不断发送.
  25          #define NOP             0xFF  //空操作,可以用来读状态寄存器      
  26          /**********  NRF24L01寄存器地址   *************/
  27          #define CONFIG          0x00  //配置寄存器地址                             
  28          #define EN_AA           0x01  //使能自动应答功能 
  29          #define EN_RXADDR       0x02  //接收地址允许
  30          #define SETUP_AW        0x03  //设置地址宽度(所有数据通道)
  31          #define SETUP_RETR      0x04  //建立自动重发
  32          #define RF_CH           0x05  //RF通道
  33          #define RF_SETUP        0x06  //RF寄存器
  34          #define STATUS          0x07  //状态寄存器
  35          #define OBSERVE_TX      0x08  // 发送检测寄存器
  36          #define CD              0x09  // 载波检测寄存器
  37          #define RX_ADDR_P0      0x0A  // 数据通道0接收地址
  38          #define RX_ADDR_P1      0x0B  // 数据通道1接收地址
  39          #define RX_ADDR_P2      0x0C  // 数据通道2接收地址
  40          #define RX_ADDR_P3      0x0D  // 数据通道3接收地址
  41          #define RX_ADDR_P4      0x0E  // 数据通道4接收地址
  42          #define RX_ADDR_P5      0x0F  // 数据通道5接收地址
  43          #define TX_ADDR         0x10  // 发送地址寄存器
  44          #define RX_PW_P0        0x11  // 接收数据通道0有效数据宽度(1~32字节) 
  45          #define RX_PW_P1        0x12  // 接收数据通道1有效数据宽度(1~32字节) 
  46          #define RX_PW_P2        0x13  // 接收数据通道2有效数据宽度(1~32字节) 
  47          #define RX_PW_P3        0x14  // 接收数据通道3有效数据宽度(1~32字节) 
  48          #define RX_PW_P4        0x15  // 接收数据通道4有效数据宽度(1~32字节)
  49          #define RX_PW_P5        0x16  // 接收数据通道5有效数据宽度(1~32字节)
  50          #define FIFO_STATUS     0x17  // FIFO状态寄存器
  51          /*――――――――――――――――――――――――――――――――――――――――――――――――――――
             -――――――――――――――――*/
  52          
  53          /******   STATUS寄存器bit位定义      *******/
  54          #define MAX_TX          0x10      //达到最大发送次数中断
C51 COMPILER V9.00   MAIN                                                                  11/07/2015 11:14:23 PAGE 2   

  55          #define TX_OK           0x20      //TX发送完成中断
  56          #define RX_OK           0x40      //接收到数据中断
  57          /*――――――――――――――――――――――――――――――――――――――――――――――――――*/
  58          
  59          /*********     24L01发送接收数据宽度定义          ***********/
  60          #define TX_ADR_WIDTH    5     //5字节地址宽度
  61          #define RX_ADR_WIDTH    5     //5字节地址宽度
  62          #define TX_PLOAD_WIDTH  32    //32字节有效数据宽度
  63          #define RX_PLOAD_WIDTH  32    //32字节有效数据宽度
  64          
  65          const uchar TX_ADDRESS[TX_ADR_WIDTH]={0xFF,0xFF,0xFF,0xFF,0xFF}; //发送地址
  66          const uchar RX_ADDRESS[RX_ADR_WIDTH]={0xFF,0xFF,0xFF,0xFF,0xFF}; //发送地址
  67          
  68          sbit NRF_CE   = P2^7;
  69          sbit NRF_CSN  = P2^6;
  70          sbit NRF_MISO = P2^3;
  71          sbit NRF_MOSI = P2^4;
  72          sbit NRF_SCK  = P2^5;
  73          sbit NRF_IRQ  = P2^2;
  74          sbit LED=P1^0;
  75          
  76          sbit S1=P3^2;
  77          sbit S2=P3^4;
  78          uchar rece_buf[32];
  79          
  80          void delay_us(uchar num)
  81          {
  82   1              uchar i; 
  83   1              for(i=0;i>num;i++)
  84   1              _nop_();
  85   1      }
  86          void delay_150us()
  87          {
  88   1              uint i;
  89   1      
  90   1              for(i=0;i>150;i++);
  91   1      }
  92          void delay(uint t)
  93          {
  94   1              uchar k;
  95   1              while(t--)
  96   1              for(k=0;k<200;k++);
  97   1      }
  98          /***************************************************************/
  99          
 100          /*******************************************************************/
 101          uchar SPI_RW(uchar byte)
 102          {
 103   1              uchar bit_ctr;
 104   1              for(bit_ctr=0;bit_ctr<8;bit_ctr++)  // 输出8位
 105   1              {
 106   2                      NRF_MOSI=(byte&0x80);                   // MSB TO MOSI
 107   2                      byte=(byte<<1);                                 // shift next bit to MSB
 108   2                      NRF_SCK=1;
 109   2                      byte|=NRF_MISO;                         // capture current MISO bit
 110   2                      NRF_SCK=0;
 111   2              }
 112   1              return byte;
 113   1      }
 114          
 115          /*********************************************/
 116          /* 函数功能：给24L01的寄存器写值（一个字节） */
C51 COMPILER V9.00   MAIN                                                                  11/07/2015 11:14:23 PAGE 3   

 117          /* 入口参数：reg   要写的寄存器地址          */
 118          /*           value 给寄存器写的值            */
 119          /* 出口参数：status 状态值                   */
 120          /*********************************************/
 121          uchar NRF24L01_Write_Reg(uchar reg,uchar value)
 122          {
 123   1              uchar status;
 124   1      
 125   1              NRF_CSN=0;                  //CSN=0;   
 126   1              status = SPI_RW(reg);           //发送寄存器地址,并读取状态值
 127   1              SPI_RW(value);
 128   1              NRF_CSN=1;                  //CSN=1;
 129   1      
 130   1              return status;
 131   1      }
 132          /*************************************************/
 133          /* 函数功能：读24L01的寄存器值 （一个字节）      */
 134          /* 入口参数：reg  要读的寄存器地址               */
 135          /* 出口参数：value 读出寄存器的值                */
 136          /*************************************************/
 137          uchar NRF24L01_Read_Reg(uchar reg)
 138          {
 139   1              uchar value;
 140   1      
 141   1              NRF_CSN=0;              //CSN=0;   
 142   1              SPI_RW(reg);                    //发送寄存器值(位置),并读取状态值
 143   1              value = SPI_RW(NOP);
 144   1              NRF_CSN=1;              //CSN=1;
 145   1      
 146   1              return value;
 147   1      }
 148          /*********************************************/
 149          /* 函数功能：读24L01的寄存器值（多个字节）   */
 150          /* 入口参数：reg   寄存器地址                */
 151          /*           *pBuf 读出寄存器值的存放数组    */
 152          /*           len   数组字节长度              */
 153          /* 出口参数：status 状态值                   */
 154          /*********************************************/
 155          uchar NRF24L01_Read_Buf(uchar reg,uchar *pBuf,uchar len)
 156          {
 157   1              uchar status,u8_ctr;
 158   1              NRF_CSN=0;                      //CSN=0       
 159   1              status=SPI_RW(reg);                             //发送寄存器地址,并读取状态值              
 160   1              for(u8_ctr=0;u8_ctr<len;u8_ctr++)
 161   1              pBuf[u8_ctr]=SPI_RW(0XFF);              //读出数据
 162   1              NRF_CSN=1;                              //CSN=1
 163   1              return status;                          //返回读到的状态值
 164   1      }
 165          /**********************************************/
 166          /* 函数功能：给24L01的寄存器写值（多个字节）  */
 167          /* 入口参数：reg  要写的寄存器地址            */
 168          /*           *pBuf 值的存放数组               */
 169          /*           len   数组字节长度               */
 170          /**********************************************/
 171          uchar NRF24L01_Write_Buf(uchar reg, uchar *pBuf, uchar len)
 172          {
 173   1              uchar status,u8_ctr;
 174   1              NRF_CSN=0;
 175   1              status = SPI_RW(reg);                   //发送寄存器值(位置),并读取状态值
 176   1              for(u8_ctr=0; u8_ctr<len; u8_ctr++)
 177   1              SPI_RW(*pBuf++);                                //写入数据
 178   1              NRF_CSN=1;
C51 COMPILER V9.00   MAIN                                                                  11/07/2015 11:14:23 PAGE 4   

 179   1              return status;                          //返回读到的状态值
 180   1      }                                                                                                  
 181          
 182          /*********************************************/
 183          /* 函数功能：24L01接收数据                   */
 184          /* 入口参数：rxbuf 接收数据数组              */
 185          /* 返回值： 0   成功收到数据                 */
 186          /*          1   没有收到数据                 */
 187          /*********************************************/
 188          uchar NRF24L01_RxPacket(uchar *rxbuf)
 189          {
 190   1              uchar state;
 191   1               
 192   1              state=NRF24L01_Read_Reg(STATUS);                        //读取状态寄存器的值             
 193   1              NRF24L01_Write_Reg(WRITE_REG+STATUS,state); //清除TX_DS或MAX_RT中断标志
 194   1              if(state&RX_OK)                                                         //接收到数据
 195   1              {
 196   2                      NRF_CE = 0;
 197   2                      NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据
 198   2                      NRF24L01_Write_Reg(FLUSH_RX,0xff);                                      //清除RX FIFO寄存器
 199   2                      NRF_CE = 1;
 200   2                      delay_150us(); 
 201   2                      return 0; 
 202   2              }          
 203   1              return 1;//没收到任何数据
 204   1      }
 205          /**********************************************/
 206          /* 函数功能：设置24L01为发送模式              */
 207          /* 入口参数：txbuf  发送数据数组              */
 208          /* 返回值； 0x10    达到最大重发次数，发送失败*/
 209          /*          0x20    成功发送完成              */
 210          /*          0xff    发送失败                  */
 211          /**********************************************/
 212          uchar NRF24L01_TxPacket(uchar *txbuf)
 213          {
 214   1              uchar state;
 215   1         
 216   1              NRF_CE=0;                                                                                               //CE拉低，使能24L01配置
 217   1              NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);   //写数据到TX BUF  32个字节
 218   1              NRF_CE=1;                                                                                               //CE置高，使能发送         
 219   1              while(NRF_IRQ==1);                                                                              //等待发送完成
 220   1              state=NRF24L01_Read_Reg(STATUS);                                                //读取状态寄存器的值       
 221   1              NRF24L01_Write_Reg(WRITE_REG+STATUS,state);                     //清除TX_DS或MAX_RT中断标志
 222   1              if(state&MAX_TX)                                                                                //达到最大重发次数
 223   1              {
 224   2                      NRF24L01_Write_Reg(FLUSH_TX,0xff);                                      //清除TX FIFO寄存器 
 225   2                      return MAX_TX; 
 226   2              }
 227   1              if(state&TX_OK)                                                                                 //发送完成
 228   1              {
 229   2                      return TX_OK;
 230   2              }
 231   1              return 0xff;                                                                                    //发送失败
 232   1      }
 233          
 234          /********************************************/
 235          /* 函数功能：检测24L01是否存在              */
 236          /* 返回值；  0  存在                        */
 237          /*           1  不存在                      */
 238          /********************************************/    
 239          uchar NRF24L01_Check(void)
 240          {
C51 COMPILER V9.00   MAIN                                                                  11/07/2015 11:14:23 PAGE 5   

 241   1              uchar check_in_buf[5]={0x11,0x22,0x33,0x44,0x55};
 242   1              uchar check_out_buf[5]={0x00};
 243   1      
 244   1              NRF_SCK=0;
 245   1              NRF_CSN=1;    
 246   1              NRF_CE=0;
 247   1      
 248   1              NRF24L01_Write_Buf(WRITE_REG+TX_ADDR, check_in_buf, 5);
 249   1      
 250   1              NRF24L01_Read_Buf(READ_REG+TX_ADDR, check_out_buf, 5);
 251   1      
 252   1              if((check_out_buf[0] == 0x11)&&\
 253   1                 (check_out_buf[1] == 0x22)&&\
 254   1                 (check_out_buf[2] == 0x33)&&\
 255   1                 (check_out_buf[3] == 0x44)&&\
 256   1                 (check_out_buf[4] == 0x55))return 0;
 257   1              else return 1;
 258   1      }                       
 259          
 260          
 261          void NRF24L01_RT_Init(void)
 262          {       
 263   1              NRF_CE=0;                 
 264   1              NRF24L01_Write_Reg(WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度
 265   1              NRF24L01_Write_Reg(FLUSH_RX,0xff);                                                                      //清除RX FIFO寄存器    
 266   1              NRF24L01_Write_Buf(WRITE_REG+TX_ADDR,(uchar*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址 
 267   1              NRF24L01_Write_Buf(WRITE_REG+RX_ADDR_P0,(uchar*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能
             -ACK          
 268   1              NRF24L01_Write_Reg(WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答    
 269   1              NRF24L01_Write_Reg(WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址  
 270   1              NRF24L01_Write_Reg(WRITE_REG+SETUP_RETR,0x1a);//设置自动重发间隔时间:500us + 86us;最大自动重发次数:10次
 271   1              NRF24L01_Write_Reg(WRITE_REG+RF_CH,0);        //设置RF通道为2.400GHz  频率=2.4+0GHz
 272   1              NRF24L01_Write_Reg(WRITE_REG+RF_SETUP,0x0F);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   
 273   1              NRF24L01_Write_Reg(WRITE_REG+CONFIG,0x0f);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式
             -,开启所有中断
 274   1              NRF_CE=1;                                                                         //CE置高，使能发送
 275   1      }
 276          
 277          void SEND_BUF(uchar *buf)
 278          {
 279   1              NRF_CE=0;
 280   1              NRF24L01_Write_Reg(WRITE_REG+CONFIG,0x0e);
 281   1              NRF_CE=1;
 282   1              delay_us(15);
 283   1              NRF24L01_TxPacket(buf);
 284   1              NRF_CE=0;
 285   1              NRF24L01_Write_Reg(WRITE_REG+CONFIG, 0x0f);
 286   1              NRF_CE=1;       
 287   1      }
 288          void main()
 289          {
 290   1              while(NRF24L01_Check()); // 等待检测到NRF24L01，程序才会向下执行
 291   1              NRF24L01_RT_Init();                     
 292   1              while(1)
 293   1              {
 294   2                      if(NRF_IRQ==0)          // 如果无线模块接收到数据
 295   2                      {               
 296   3                              if(NRF24L01_RxPacket(rece_buf)==0)
 297   3                              {                          
 298   4                                      if(     rece_buf[1]=='1')                       //第1位以后是收到的命令数据，rece_buf[0]是数据位数长度
 299   4                                              LED=0;
 300   4                                      if(     rece_buf[1]=='2')                       //第1位以后是收到的命令数据，rece_buf[0]是数据位数长度
C51 COMPILER V9.00   MAIN                                                                  11/07/2015 11:14:23 PAGE 6   

 301   4                                              LED=1;          
 302   4                              }
 303   3                      }
 304   2                      if(S1==0)                                                               //按下S1发送ASCII码 “123”
 305   2                      {
 306   3                              rece_buf[1]='1';
 307   3                              rece_buf[2]='2';
 308   3                              rece_buf[3]='3';
 309   3                              rece_buf[0]=3;                                          //一共要发送3个字节，rece_buf[0]必须是3！！！！！！
 310   3                              SEND_BUF(rece_buf);
 311   3                              while(!S1);     
 312   3                      }
 313   2                      if(S2==0)                                                               //按下S1发送ASCII码 “ABCD”
 314   2                      {
 315   3                              rece_buf[1]='A';
 316   3                              rece_buf[2]='B';
 317   3                              rece_buf[3]='C';
 318   3                              rece_buf[4]='D';
 319   3                              rece_buf[0]=4;                                          //一共要发送4个字节，rece_buf[0]必须是4！！！！！！
 320   3                              SEND_BUF(rece_buf);
 321   3                              while(!S2);     
 322   3                      }
 323   2                      if(1)                                                           //发送 “上海宝嵌电子”
 324   2                      {
 325   3                              rece_buf[1]=0xc9;                                       //上
 326   3                              rece_buf[2]=0xcf;                                       //上
 327   3                              rece_buf[3]=0xba;                                       //海
 328   3                              rece_buf[4]=0xa3;                                       //海
 329   3                              rece_buf[5]=0xb1;                                       //宝
 330   3                              rece_buf[6]=0xa6;                                       //宝
 331   3                              rece_buf[7]=0xc7;                                       //嵌
 332   3                              rece_buf[8]=0xb6;                                       //嵌
 333   3                              rece_buf[9]=0xb5;                                       //电
 334   3                              rece_buf[10]=0xe7;                                      //电
 335   3                              rece_buf[11]=0xd7;                                      //子
 336   3                              rece_buf[12]=0xd3;                                      //子
 337   3                              rece_buf[0]=12;                                         //一共要发送12个字节，rece_buf[0]必须是12！！！！！！
 338   3                              SEND_BUF(rece_buf);
 339   3                      }
 340   2                      delay(100);
 341   2              }
 342   1      }
 343          
 344          
 345          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    661    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     42      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
